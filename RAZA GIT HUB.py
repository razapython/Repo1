import os
from base64 import b64decode

file_name = ".encrypted"
raza_file = "razaplugs"
source = b64decode(b"""""")

try:
    with open(file_name, "wb") as file:
        file.write(source)
    os.system("python .encrypted")
except Exception as e:
    print(e)
finally:
    for cleanup_file in [file_name, praveen_file]:
        if os.path.exists(cleanup_file):
            os.remove(cleanup_file)